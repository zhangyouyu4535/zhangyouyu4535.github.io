<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS-prototype</title>
    <url>/2022/03/17/JS-prototype/</url>
    <content><![CDATA[<h2 id="对构造函数的认识"><a href="#对构造函数的认识" class="headerlink" title="对构造函数的认识"></a>对构造函数的认识</h2><p><strong>什么是构造函数</strong><br>constructor返回创建实例对象时构造函数的引用。此属性是对函数本身的引用，而不是一个包含函数名称的字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="number">50</span>);</span><br><span class="line">p.<span class="property">constructor</span> === <span class="title class_">Parent</span>; <span class="comment">// true</span></span><br><span class="line">p.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> p.<span class="property">constructor</span>);<span class="comment">//function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/63d3b112763a42c89f3aea4486e6bccd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAMjLliY3nq6_ljZXouqvov5jmkYbng4I=,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>构造函数本身就是一个函数，和普通函数没有什么区别。<br>对于普通函数来说，其创建的实例也可能具有constructor属性。（我认为关键在于该函数有没有返回一个对象，使用new关键字会自动返回一个实例对象）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parent2</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title function_">parent2</span>(<span class="number">50</span>);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parent3</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">age</span>: age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="title function_">parent3</span>(<span class="number">50</span>);</span><br><span class="line">p3.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><strong>Symbol是构造函数吗</strong><br>Symbol是基本数据类型，作为构造函数来说，它不完整，Symbol不支持new Symbol<br>但是Symbol生成的实例却可以获取constructor属性值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sym = <span class="title class_">Symbol</span>(<span class="number">123</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( sym );</span><br><span class="line"><span class="comment">// Symbol(123)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( sym.<span class="property">constructor</span> );</span><br><span class="line"><span class="comment">// ƒ Symbol() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>
<p>这里的constructor来自Symbol原型上，即Symbol.prototype.constructor 返回创建实例原型的函数， 默认为 Symbol 函数。</p>
<p><strong>constructor值只读吗</strong><br>对于引用类型来说，constructor属性值是可以修改的，但是对于基本类型来说是只读的。可以设置为另外一个构造函数，如Bar的constructor可以指向Foo</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Bar 的 prototype 属性为 Foo 的实例对象</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修正 Bar.prototype.constructor 为 Bar 本身</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Bar</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Bar</span>() <span class="comment">// 创建 Bar 的一个新实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br></pre></td></tr></table></figure>
<p><strong>模拟实现new</strong></p>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p><strong>prototype</strong><br>JavaScript是一门基于原型的语言，和Java等基于类的语言不一样。<br>每个对象都拥有一个原型对象，对象以其原型为模板，从原型继承方法和属性，这些属性和方法定义在对象的构造器函数的prototype属性上，而非对象实例本身。</p>
<p>构造函数 Parent 有一个指向原型的指针，原型 Parent.prototype 有一个指向构造函数的指针 Parent.prototype.constructor，如下图所示，其实就是一个循环引用。<br><img src="https://img-blog.csdnimg.cn/f12e2c9c81fc4832b93c161995303e12.png" alt="在这里插入图片描述"><br>所以构造函数 Parent、Parent.prototype 和 p 的关系如下图。<br><img src="https://img-blog.csdnimg.cn/3433b62a60a44ec89a3825b6697e2777.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAMjLliY3nq6_ljZXouqvov5jmkYbng4I=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>如果要创建一个对象，同时继承另外一个对象的prototype，推荐使用Object.create()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">50</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="keyword">var</span> child = <span class="title class_">Object</span>.<span class="title function_">create</span>(p);</span><br></pre></td></tr></table></figure>
<p><strong>原型链</strong><br>每个对象拥有一个原型对象，通过_proto_指针指向上一个原型，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向null。这种关系被称为原型链，通过原型链一个对象会拥有定义在其他对象中的属性和方法。</p>
<p>看个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="number">50</span>);</span><br><span class="line">p.<span class="property">constructor</span> === <span class="title class_">Parent</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f909167925044fdaa56e0f5edef435dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAMjLliY3nq6_ljZXouqvov5jmkYbng4I=,size_10,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>这里的p不存在constructor属性，通过原型链向上查找，最终查找到constructor属性，该属性指向Parent。如下图所示：<br><img src="https://img-blog.csdnimg.cn/3b71982a527343c4bdf6b94a0cda264d.png" alt="在这里插入图片描述"><br><strong>小结：</strong></p>
<ul>
<li>Symbol作为构造函数来说并不完整，因为不支持语法new Symbol(),但其原型上拥有constructor属性，即Symbol.prototype.constructor</li>
<li>引用类型的constructor是可以修改的，但对基本数据类型来说是只读的，当然null和undefined没有constructor属性。</li>
<li><strong>proto</strong> 是每个实例上都有的属性，prototype 是构造函数的属性，这两个并不一样，但  p.<strong>proto</strong>  和 Parent.prototype 指向同一个对象。</li>
<li><strong>proto</strong> 属性在 ES6 时被标准化，但因为性能问题并不推荐使用，推荐使用 Object.getPrototypeOf()。</li>
<li>每个对象拥有一个原型对象，通过 <strong>proto</strong> 指针指向上一个原型<br>，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null，这就是原型链。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>my new post</title>
    <url>/2022/03/12/my-new-post/</url>
    <content><![CDATA[<p>第一篇文章</p>
<p><strong>大致流程：</strong> 当我们输入网址，按下回车键之后，输入的的网址在通过DNS解析之后得到服务器地址，然后再向服务器发起http请求，经过TCP三次握手确认链接后，服务器返回给浏览器想要的代码，浏览器接收到代码后，进行解析经过DOM构造，布局，绘制页面，展现为最后的网页效果。</p>
<hr>
<p><strong>1、DOM构造：</strong> 浏览器将html代码通过html解析器构造为一颗DOM树，然后将css代码通过css解析器构造出样式表规则。然后将这些规则分别放到对应的DOM树节点上。得到一颗带有样式属性的DOM树。</p>
<hr>
<p><strong>2、布局：</strong> 浏览器按照从上到下，从左到右的顺序，读取DOM树的文档节点，顺序存放到一个虚拟的传送带上，传送带上的盒子就是节点，而这条流动的传送带就是文档流，如果我们读取到的一个节点是属于另外一个节点下的子节点，那么在放入传送带的时候，就应该按顺序放到该节点盒子的内部，如果子节点下还有子节点，在传送带上的时候就继续套到子一级的盒子内部，根据它在DOM树上的结构，可以嵌套的层级是没有限制的。文档流排完之后，开始获取计算节点的坐标和大小等css属性作为盒子的包装说明。然后把盒子在仓库中一一摆放，就将节点布局到了页面。</p>
<hr>
<p><strong>3、绘制页面：</strong>  布局完成之后，我们在页面上是看不到任何内容的，浏览器只是计算出了每一个节点对象应该被放到页面的哪个位置上，但并没有可视化，因此最后一步就是将所有的内容绘制出来。完成整个页面的渲染。</p>
<p><strong>文档流与网页的关系：</strong> 将一维节点映射到二维空间的关系。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
